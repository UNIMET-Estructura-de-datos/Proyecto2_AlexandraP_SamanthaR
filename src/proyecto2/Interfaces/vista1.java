/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyecto2.Interfaces;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import proyecto2.FuncionesTEMP;
import proyecto2.MontículoB;
import proyecto2.NodoDoc;

/**
 *
 * @author Samantha
 */
public class vista1 extends javax.swing.JFrame {
    public static MontículoB monticulo_binario;
    /**
     * Creates new form vista1
     */
    public vista1(MontículoB mont) {
        initComponents();
        this.monticulo_binario = mont;
         this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                super.windowClosing(e);
                FuncionesTEMP.WriteCSV(Ventana1.ListaUsuarios); 
                
                System.exit(0);
            }
        });
    }
 /**
  * Este método dibuja un árbol binario en un objeto Graphics.
    Cada nodo del árbol se representa como un círculo, y las aristas se representan como líneas que conectan los círculos.
    El método se llama recursivamente para los hijos izquierdo y derecho de cada nodo.
  * @param g
  * @param x
  * @param x0
  * @param x1
  * @param y
  * @param index
  * @return 
  */
 public int drawTree(Graphics g, NodoDoc x, int x0, int x1, int y, int index){

        int m = (x0 + x1) / 2;
        g.setColor(Color.PINK);
        g.fillOval(m, y, 50, 40);
        g.setColor(Color.BLACK);
        g.setFont(new Font("Arial",Font.BOLD,20));
        String t = String.valueOf(x.getEtiquetaTiempo());
        g.drawString(t, m+20, y+30);
        
        int izq = this.monticulo_binario.PosHijoIzq(index);
        int der = this.monticulo_binario.PosHijoDer(index);
        
        if (izq < this.monticulo_binario.getNumElem() && this.monticulo_binario.getHeap()[izq] != null) {
            int x2 = drawTree(g, this.monticulo_binario.getHeap()[izq],x0,m,y+50, izq);
            g.drawLine(m+25, y+40, x2+25, y+50);
        }
        if (der < this.monticulo_binario.getNumElem() && this.monticulo_binario.getHeap()[der]!= null) {
            int x2 = drawTree(g, this.monticulo_binario.getHeap()[der],m,x1,y+50, der);
            g.drawLine(m+25, y+40, x2+25, y + 50);
        }
        return m;
    }
/**
 * Este método se llama automáticamente cuando se necesita redibujar la ventana.
 Llama al método drawTree para dibujar el árbol binario en la ventana.
 * @param g 
 */
    @Override
    public void paint(Graphics g) {
        super.paint(g);
        drawTree(g, this.monticulo_binario.getHeap()[0], 0, this.getWidth()-25, 100, 0);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(vista1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(vista1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(vista1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(vista1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new vista1(monticulo_binario).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
